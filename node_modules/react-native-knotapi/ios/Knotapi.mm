#import "Knotapi.h"
#import <React/RCTConvert.h>
#import "KnotAPI/KnotAPI-Swift.h"
#import <WebKit/WebKit.h>

@interface Knotapi () <KnotEventDelegate>
@property (nonatomic, strong) NSString* productName;
@end

@implementation Knotapi

RCT_EXPORT_MODULE()

RCT_EXPORT_METHOD(close){
    dispatch_async(dispatch_get_main_queue(), ^{
        [Knot close];
    });
}

RCT_EXPORT_METHOD(open:(NSDictionary *)params){
  dispatch_async(dispatch_get_main_queue(), ^{
      NSString *sessionId = [params objectForKey:@"sessionId"];
      NSString *clientId = [params objectForKey:@"clientId"];
      NSArray<NSNumber*> *merchantIds = [params objectForKey:@"merchantIds"];
      NSString *environmentString = [params objectForKey:@"environment"];
      NSString *entryPoint = [params objectForKey:@"entryPoint"];
      self.productName = [params objectForKey:@"product"];
      BOOL useCategories = [[params objectForKey:@"useCategories"] boolValue];
      BOOL useSearch = true; // default value is true
      id useSearchValue = [params objectForKey:@"useSearch"];
      if (useSearchValue != nil) {
          useSearch = [useSearchValue boolValue];
      }

    Product product = ProductCard_switcher;
    if ([self.productName isEqualToString:@"transactions_link"]) {
      product = ProductTransaction_link;
    }

    Environment environment = EnvironmentProduction;
    if ([environmentString isEqualToString:@"sandbox"]) {
      environment = EnvironmentSandbox;
    }
    if ([environmentString isEqualToString:@"development"]) {
      environment = EnvironmentDevelopment;
    }

    KnotConfiguration *knotConfiguration = [[KnotConfiguration alloc]
        initWithSessionId:sessionId clientId:clientId environment:environment entryPoint:entryPoint product:product useCategories:useCategories useSearch:useSearch merchantIds:merchantIds
    ];

    [Knot openWithConfiguration:knotConfiguration delegate:self];

  });
}

- (NSArray<NSString *> *)supportedEvents
{
  return @[@"onSuccess", @"onError", @"onEvent", @"onExit"];
}

- (void)onErrorWithError:(enum KnotError)error {
  NSString *errorMessage;
  NSString *errorCode;
  switch (error) {
      case KnotErrorInvalidSession:
        errorCode = @"Session_Not_Found";
        errorMessage = @"Invalid session.";
        break;
      case KnotErrorExpiredSession:
        errorCode = @"Session_Expired";
        errorMessage = @"Session has expired.";
        break;
      case KnotErrorInvalidClientId:
        errorCode = @"Client_ID_Not_Found";
        errorMessage = @"Invalid client ID.";
        break;
      case KnotErrorInternalError:
        errorCode = @"Internal_Error";
        errorMessage = @"An internal error occurred.";
        break;
  }
  [self sendEventWithName:@"onError" body:@{@"errorCode": errorCode, @"errorMessage": errorMessage, @"product": self.productName}];
}

- (void)onEventWithEvent:(KnotEvent * _Nonnull)event {
  Environment environment = event.environment;
  NSString *environmentString = @"";
  if (environment == EnvironmentSandbox) {
    environmentString = @"sandbox";
  } else if (environment == EnvironmentDevelopment) {
    environmentString = @"development";
  } else {
    environmentString = @"production";
  }
  
  NSMutableDictionary *body = [@{@"event": event.event, @"environment": environmentString, @"merchant": event.merchant, @"product": self.productName} mutableCopy];
  if (event.taskId != nil) {
    body[@"taskId"] = event.taskId;
  }
  if (event.metaData != nil) {
    body[@"metaData"] = event.metaData;
  }
  [self sendEventWithName:@"onEvent" body:body];
}

- (void)onExit {
  [self sendEventWithName:@"onExit" body:@{@"product": self.productName}];
}

- (void)onSuccessWithMerchant:(NSString * _Nonnull)merchant {
  [self sendEventWithName:@"onSuccess" body:@{@"merchant": merchant, @"product": self.productName}];
}

@end
