package com.reactnativeknotapi;

import android.content.Context;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import org.json.JSONObject;
import org.json.JSONArray;
import java.util.Iterator;
import android.os.Bundle;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.knotapi.knot.models.Environment;
import com.knotapi.knot.Knot;
import com.knotapi.knot.models.KnotConfiguration;
import com.knotapi.knot.interfaces.KnotEventDelegate;
import com.knotapi.knot.models.KnotError;
import com.knotapi.knot.models.KnotEvent;

@ReactModule(name = KnotapiModule.NAME)
public class KnotapiModule extends ReactContextBaseJavaModule {
  public static final String NAME = "Knotapi";
  Context context;

  public KnotapiModule(ReactApplicationContext reactContext) {
    super(reactContext);
    context = reactContext;
  }

  @Override
  @NonNull
  public String getName() {
    return NAME;
  }

  private void sendEvent(ReactContext reactContext,
                         String eventName,
                         @Nullable WritableMap params) {
    reactContext
      .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
      .emit(eventName, params);
  }

  // Convert JSONObject to Bundle
  private Bundle convertToBundle(JSONObject jsonObject) throws IllegalArgumentException {
      Bundle bundle = new Bundle();
      try {
          Iterator<String> keys = jsonObject.keys();
          while (keys.hasNext()) {
              String key = keys.next();
              Object value = jsonObject.get(key);
              if (value instanceof String) {
                  bundle.putString(key, (String) value);
              } else if (value instanceof Boolean) {
                  bundle.putBoolean(key, (Boolean) value);
              } else if (value instanceof Integer) {
                  bundle.putInt(key, (Integer) value);
              } else if (value instanceof Double) {
                  bundle.putDouble(key, (Double) value);
              } else if (value instanceof JSONArray) {
                  bundle.putString(key, value.toString());
              } else {
                  // Throwing an exception for unsupported types
                  throw new IllegalArgumentException("Unsupported value type for key: " + key);
              }
          }
      } catch (Exception e) {
          e.printStackTrace();
          // You can rethrow as a custom exception if needed
          throw new IllegalArgumentException("Error while converting JSONObject to Bundle", e);
      }
      return bundle;
  }

  KnotEventDelegate createKnotEventDelegateListener(String product) {
    return new KnotEventDelegate() {
      @Override
      public void onSuccess(String merchant) {
        WritableMap params = Arguments.createMap();
        params.putString("merchant", merchant);
        params.putString("product", product);
        sendEvent(getReactApplicationContext(), "onSuccess", params);
      }

      @Override
      public void onError(KnotError knotError) {
        WritableMap params = Arguments.createMap();
        params.putString("message", knotError.getErrorDescription());
        params.putString("error", knotError.getErrorCode());
        params.putString("product", product);
        sendEvent(getReactApplicationContext(), "onError", params);
      }

      @Override
      public void onExit() {
        WritableMap params = Arguments.createMap();
        params.putString("product", product);
        sendEvent(getReactApplicationContext(), "onExit", params);
      }

      @Override
      public void onEvent(KnotEvent knotEvent) {
        WritableMap params = Arguments.createMap();
        params.putString("product", product);
        params.putString("event", knotEvent.getEvent());
        params.putString("merchant", knotEvent.getMerchantName());
        params.putString("environment", knotEvent.getEnvironment().name());
        if (knotEvent.getTaskId() != null && !knotEvent.getTaskId().trim().isEmpty()) {
          params.putString("taskId", knotEvent.getTaskId());
        }
        if (knotEvent.getMetaData() != null) {
          try {
            ReadableMap readableMap = Arguments.fromBundle(convertToBundle(new JSONObject(knotEvent.getMetaData())));
            params.putMap("metaData", readableMap);
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
        sendEvent(getReactApplicationContext(), "onEvent", params);
      }
    };
  }

  @ReactMethod
  public void close() {
    Knot.close();
  }

  public @Nullable int[] getMerchantIds(ReadableMap params) {
    @Nullable int[] merchantIdsArr;
    if (params.hasKey("merchantIds")) {
      ReadableArray merchantIds = params.getArray("merchantIds");
      // convert ReadableArray merchants to array of int
      merchantIdsArr = new int[merchantIds.size()];
      for (int i = 0; i < merchantIds.size(); i++) {
        merchantIdsArr[i] = merchantIds.getInt(i);
      }
    } else {
      merchantIdsArr = new int[]{};
    }
    return merchantIdsArr;
  }

  public @Nullable String[] getDomainUrls(ReadableMap params) {
    @Nullable String[] domainUrlsArr;
    if (params.hasKey("domainUrls")) {
      ReadableArray domainUrls = params.getArray("domainUrls");
      // convert ReadableArray domainUrls to array of string
      domainUrlsArr = new String[domainUrls.size()];
      for (int i = 0; i < domainUrls.size(); i++) {
        domainUrlsArr[i] = domainUrls.getString(i);
      }
    } else {
      domainUrlsArr = new String[]{};
    }
    return domainUrlsArr;
  }

  // Example method
  // See https://reactnative.dev/docs/native-modules-android
  @ReactMethod
  public void open(ReadableMap params) {
    String sessionId = params.getString("sessionId");
    String clientId = params.getString("clientId");
    @Nullable String entryPoint = params.hasKey("entryPoint") ? params.getString("entryPoint") : null;
    Environment environment = params.hasKey("environment") ? Environment.valueOf(params.getString("environment")) : null;
    Knot.Product product = params.hasKey("product") ? Knot.Product.valueOf(params.getString("product")) : null;
    @Nullable int[] merchantIdsArr = getMerchantIds(params);
    @Nullable String[] domainUrlsArr = getDomainUrls(params);
    boolean useCategories = params.hasKey("useCategories") ? params.getBoolean("useCategories") : false;
    boolean useSearch = params.hasKey("useSearch") ? params.getBoolean("useSearch") : true;
    KnotConfiguration knotConfiguration = new KnotConfiguration(sessionId, clientId, environment, product, merchantIdsArr, useCategories, useSearch, domainUrlsArr, entryPoint);
    KnotEventDelegate eventDelegate = createKnotEventDelegateListener(product.name());
    Knot.open(context, knotConfiguration, eventDelegate);
  }
}
