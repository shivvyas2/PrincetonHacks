import {
  NativeModules,
  Platform,
  NativeEventEmitter,
  InteractionManager,
} from 'react-native';

const LINKING_ERROR =
  `The package 'react-native-knotapi' doesn't seem to be linked. Make sure: \n\n` +
  Platform.select({ ios: "- You have run 'pod install'\n", default: '' }) +
  '- You rebuilt the app after installing the package\n' +
  '- You are not using Expo managed workflow\n';

const Knotapi = NativeModules.Knotapi
  ? NativeModules.Knotapi
  : new Proxy(
      {},
      {
        get() {
          throw new Error(LINKING_ERROR);
        },
      }
    );

const eventEmitter = new NativeEventEmitter(Knotapi);

type CommonConfig = {
  sessionId: string;
  clientId: string;
  merchantIds?: number[];
  domainUrls?: string[];
  environment: 'production' | 'sandbox' | 'development';
  product: 'card_switcher' | 'transactions_link';
  useCategories?: boolean;
  useSearch?: boolean;
  entryPoint?: string;
};

export type KnotError = {
  errorCode: string;
  errorMessage: string;
  product?: 'card_switcher' | 'transaction_link';
};
export type KnotEvent = {
  event: string;
  merchant: string;
  metaData?: Record<string, unknown>;
  product?: 'card_switcher' | 'transaction_link';
  taskId?: string;
  environment: 'production' | 'sandbox' | 'development';
};
export type KnotSuccess = {
  merchant: string;
  product?: 'card_switcher' | 'transaction_link';
};
export type KnotExit = { product?: 'card_switcher' | 'transaction_link' };

export const Knot = {
  open: (params: CommonConfig) => {
    InteractionManager.runAfterInteractions(() => {
      setTimeout(() => {
        Knotapi?.open(params);
      }, 50);
    });
  },
  close: () => {
    Knotapi?.close();
  },
};

type KnotCallbacks = {
  onSuccess: KnotSuccess;
  onError: KnotError;
  onEvent: KnotEvent;
  onExit: KnotExit;
};

export const addKnotListener = <T extends keyof KnotCallbacks>(
  eventName: T,
  callback: (event: KnotCallbacks[T]) => void
) => {
  return eventEmitter.addListener(`${eventName}`, callback);
};

export default Knotapi;
