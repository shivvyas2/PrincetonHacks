declare const Knotapi: any;
type CommonConfig = {
    sessionId: string;
    clientId: string;
    merchantIds?: number[];
    domainUrls?: string[];
    environment: 'production' | 'sandbox' | 'development';
    product: 'card_switcher' | 'transactions_link';
    useCategories?: boolean;
    useSearch?: boolean;
    entryPoint?: string;
};
export type KnotError = {
    errorCode: string;
    errorMessage: string;
    product?: 'card_switcher' | 'transaction_link';
};
export type KnotEvent = {
    event: string;
    merchant: string;
    metaData?: Record<string, unknown>;
    product?: 'card_switcher' | 'transaction_link';
    taskId?: string;
    environment: 'production' | 'sandbox' | 'development';
};
export type KnotSuccess = {
    merchant: string;
    product?: 'card_switcher' | 'transaction_link';
};
export type KnotExit = {
    product?: 'card_switcher' | 'transaction_link';
};
export declare const Knot: {
    open: (params: CommonConfig) => void;
    close: () => void;
};
type KnotCallbacks = {
    onSuccess: KnotSuccess;
    onError: KnotError;
    onEvent: KnotEvent;
    onExit: KnotExit;
};
export declare const addKnotListener: <T extends keyof KnotCallbacks>(eventName: T, callback: (event: KnotCallbacks[T]) => void) => import("react-native").EmitterSubscription;
export default Knotapi;
//# sourceMappingURL=index.d.ts.map